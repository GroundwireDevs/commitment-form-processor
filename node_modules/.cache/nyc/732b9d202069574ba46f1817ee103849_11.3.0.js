var cov_js0zxqsmp=function(){var path='/Users/Groundwire/Documents/GitHub/commitment-form-processor/spec/spec.js',hash='309edf1043fefcbbe83fad8c98883cffe5de1a8f',global=new Function('return this')(),gcv='__coverage__',coverageData={path:'/Users/Groundwire/Documents/GitHub/commitment-form-processor/spec/spec.js',statementMap:{'0':{start:{line:1,column:21},end:{line:1,column:45}},'1':{start:{line:3,column:18},end:{line:3,column:49}},'2':{start:{line:5,column:0},end:{line:43,column:3}},'3':{start:{line:7,column:1},end:{line:14,column:4}},'4':{start:{line:10,column:2},end:{line:12,column:19}},'5':{start:{line:16,column:1},end:{line:23,column:4}},'6':{start:{line:19,column:2},end:{line:21,column:19}},'7':{start:{line:25,column:1},end:{line:32,column:4}},'8':{start:{line:28,column:2},end:{line:30,column:18}},'9':{start:{line:34,column:1},end:{line:41,column:4}},'10':{start:{line:37,column:2},end:{line:39,column:18}}},fnMap:{'0':{name:'(anonymous_0)',decl:{start:{line:5,column:27},end:{line:5,column:28}},loc:{start:{line:5,column:38},end:{line:43,column:1}},line:5},'1':{name:'(anonymous_1)',decl:{start:{line:7,column:60},end:{line:7,column:61}},loc:{start:{line:7,column:71},end:{line:14,column:2}},line:7},'2':{name:'(anonymous_2)',decl:{start:{line:16,column:63},end:{line:16,column:64}},loc:{start:{line:16,column:74},end:{line:23,column:2}},line:16},'3':{name:'(anonymous_3)',decl:{start:{line:25,column:71},end:{line:25,column:72}},loc:{start:{line:25,column:82},end:{line:32,column:2}},line:25},'4':{name:'(anonymous_4)',decl:{start:{line:34,column:58},end:{line:34,column:59}},loc:{start:{line:34,column:69},end:{line:41,column:2}},line:34}},branchMap:{},s:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0},f:{'0':0,'1':0,'2':0,'3':0,'4':0},b:{},_coverageSchema:'332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const LambdaTester=(cov_js0zxqsmp.s[0]++,require('lambda-tester'));const myHandler=(cov_js0zxqsmp.s[1]++,require('../src/reply').handler);cov_js0zxqsmp.s[2]++;describe('Reply function',function(){cov_js0zxqsmp.f[0]++;cov_js0zxqsmp.s[3]++;it('should send an email using a valid event, with age.',function(){cov_js0zxqsmp.f[1]++;cov_js0zxqsmp.s[4]++;// Valid data with age
return LambdaTester(myHandler).event({'testing':true,'language':'en','type':'salvation','firstName':'Kenan','lastName':'Scott','email':'kenans@groundwire.net','commitment':'no','age':'5'}).expectResult();});cov_js0zxqsmp.s[5]++;it('should send an email using a valid event, without age.',function(){cov_js0zxqsmp.f[2]++;cov_js0zxqsmp.s[6]++;// Valid data with age
return LambdaTester(myHandler).event({'testing':true,'language':'en','type':'salvation','firstName':'Kenan','lastName':'Scott','email':'kenans@groundwire.net','commitment':'no'}).expectResult();});cov_js0zxqsmp.s[7]++;it('shouldn\'t send an email using an invalid event key for email.',function(){cov_js0zxqsmp.f[3]++;cov_js0zxqsmp.s[8]++;// Valid data with age
return LambdaTester(myHandler).event({'testing':true,'language':'en','type':'salvation','firstName':'Kenan','lastName':'Scott','e-mail':'kenans@groundwire.net','commitment':'no'}).expectError();});cov_js0zxqsmp.s[9]++;it('shouldn\'t send an email if no input is provided.',function(){cov_js0zxqsmp.f[4]++;cov_js0zxqsmp.s[10]++;// Valid data with age
return LambdaTester(myHandler).event({'testing':true}).expectError();});});